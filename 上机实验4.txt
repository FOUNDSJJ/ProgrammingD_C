上机实验4



实验题七（1）

# include < iostream > 
using namespace std;

class Animal {
public:
	int age;
};

class dog : public Animal {
public:
	void setAge(int n);
};

void dog::setAge(int n) {
	age = n;
}

int main()
{
	dog a;
	a.setAge(17);
	return 0;
}


实验题七（2）

# include < iostream > 
using namespace std;

class BaseClass {
public:
	int Number;
};

class DerivedClass : public BaseClass {
public:
	DerivedClass(int n);
	~DerivedClass() { cout << "析构函数执行中"<<endl; };
};

DerivedClass::DerivedClass(int n) {
	Number = n;
	cout << "构造函数执行中"<<endl;
}

int main()
{
	DerivedClass a(17);
	return 0;
}




实验题七（3）

# include < iostream > 
using namespace std;

class Vehicle {
public:
	int maxSpeed,weight;
	Vehicle(int m, int w);
	virtual void run() { cout << "Vehicle的run" << endl; };
	virtual void stop() { cout << "Vehicle的stop" << endl; };
};
Vehicle::Vehicle(int m, int w) {
	maxSpeed = m;
	weight = w;
}

class Bicycle : virtual public Vehicle {
public:
	virtual void run() { cout << "Bicycle的run" << endl; };
	virtual void stop() { cout << "Bicycle的stop" << endl; };
	Bicycle(int h,int m,int w);
	int height;
};
Bicycle::Bicycle(int h, int m, int w) :Vehicle(m, w){
	height = h;
}

class Motorcar : virtual public Vehicle {
public:
	virtual void run() { cout << "Motorcar的run" << endl; };
	virtual void stop() { cout << "Motorcar的stop" << endl; };
	Motorcar(int s,int m,int w);
	int seatNum;
};
Motorcar::Motorcar(int s, int m, int w) :Vehicle(m, w) {
	seatNum = s;
}

class Motorcycycle :public Bicycle, public Motorcar {
public:
	virtual void run() { cout << "Motorcycycle的run" << endl; };
	virtual void stop() { cout << "Motorcycycle的stop" << endl; };
	Motorcycycle(int m, int w, int h, int s);
};
Motorcycycle::Motorcycycle(int m, int w, int h, int s):Bicycle(h,m,w), Motorcar(s,m,w), Vehicle(m, w) {}

void fun(Vehicle* ptr) {
	ptr->run();
	ptr->stop();
}

int main()
{
	Motorcycycle MCY(1,2,3,4);
	Motorcar MCA(5, 6, 7);
	Bicycle BIC(8, 9, 10);
	Vehicle VEH(11, 12);
	fun(&MCY);
	fun(&MCA);
	fun(&BIC);
	fun(&VEH);
	return 0;
}


实验七（4）

# include < iostream > 
using namespace std;

class Point {
public:
	float _x, _y;
	Point(int x, int y) :_x(x), _y(y) {};
	void show();
	Point operator++ ();
	Point operator++ (int);
	Point operator-- ();
	Point operator-- (int);
};
void Point::show() {
	cout << "现在坐标是（" << _x << "," << _y << ")" << endl;
}

Point Point::operator++ () {
	_x++;
	_y++;
	return *this;
}

Point Point::operator++ (int) {
	_x++;
	_y++;
	return *this;
}

Point Point::operator-- () {
	_x--;
	_y--;
	return *this;
}

Point Point::operator-- (int) {
	_x--;
	_y--;
	return *this;
}

int main()
{
	Point p(1, 2);
	p.show();
	p = p++;
	p.show();
	p = ++p;
	p.show();
	p = p--;
	p.show();
	p = --p;
	p.show();
	return 0;
}




实验八（虚函数的使用）

Framework.h

#include <iostream>
using namespace std;

#define MSG_TYPE_MOUSE_CLICK	1
#define MSG_TYPE_KEY		2
#define MSG_TYPE_QUIT		3

struct Message
{
	int type;
	int parameter1;
	int parameter2;
	Message* next;
};

class Window
{
public:
	Window(const char*);
	virtual ~Window();
	void show_window();
	bool process_message(Message*);
protected:
	virtual void on_mouse_click(int,int);
	virtual void on_key(char);
	char window_title[20];
};

class Application
{
public:
	Application();
	virtual void initialize();
	void add_messages_for_test(); 
	void run();
	bool process_message(Message*);
protected:
	virtual void on_message_quit();
	void sleep() {return;}
	void add_message(Message*);
	Message* take_first_message_from_queue();
	Message* message_queue;
	Window* main_window;
	bool end_app;
};



Framework.cpp


#include "Framework.h"

Application* thisApp;

Window::Window(const char* name)
{
	strcpy(window_title,name);
}

Window::~Window()
{
	return;
}

void Window::show_window()
{
	cout<<"The window \""<<window_title<<"\" is displayed!"<<endl;
}

bool Window::process_message(Message* msg)
{
	bool processed_or_not;
	switch (msg->type)
	{
		case MSG_TYPE_MOUSE_CLICK:
			on_mouse_click(msg->parameter1,msg->parameter2);
			processed_or_not=true;
			break;
		case MSG_TYPE_KEY:
			on_key((char)(msg->parameter1));
			processed_or_not=true;
			break;
		default:
			processed_or_not=false;
	}
	return processed_or_not;
}

void Window::on_mouse_click(int x,int y)
{
	return;
}

void Window::on_key(char c)
{
	return;
}

Application::Application()
{
	message_queue=NULL;
	main_window=NULL;
	end_app=false;
	thisApp=this;
}

void Application::initialize()
{
	main_window=new Window("New Window");
	main_window->show_window();
}

void Application::add_messages_for_test()
{
	Message* msg1=new Message;
	msg1->type=MSG_TYPE_MOUSE_CLICK;
	msg1->parameter1=20;
	msg1->parameter2=40;
	add_message(msg1);

	Message* msg2=new Message;
	msg2->type=MSG_TYPE_KEY	;
	msg2->parameter1='c';
	add_message(msg2);

	Message* msg3=new Message;
	msg3->type=MSG_TYPE_QUIT;
	add_message(msg3);
}

void Application::run()
{
	while(1)
	{
		if (message_queue!=NULL)
		{
			Message* msg=take_first_message_from_queue();
			bool processed_or_not=main_window->process_message(msg);
			if (processed_or_not==false)
				process_message(msg);
			delete msg;
			if (end_app==true) return;
		}
		else sleep();
	}
}

bool Application::process_message(Message* m)
{
	switch (m->type)
	{
		case MSG_TYPE_QUIT:
			on_message_quit();
			return true;
			break;
		default:
			return false;
	}
}

void Application::on_message_quit()
{
	end_app=true;
	delete main_window;
}

void Application::add_message(Message* m)
{
	m->next=NULL;
	if (message_queue==NULL)
		message_queue=m;
	else
	{
		Message* temp=message_queue;
		while (temp->next!=NULL)
			temp=temp->next;
		temp->next=m;
	}
}

Message* Application::take_first_message_from_queue()
{
	Message* temp=message_queue;
	message_queue=message_queue->next;
	return temp;
}

int main()
{
	thisApp->initialize();
	thisApp->add_messages_for_test();
	thisApp->run();
	return 0;
}



myApp.cpp


#include "Framework.h"

class MyWindow: public Window
{
	/*构造Window的派生类MyWindow，使其：
	1. 处理键盘或鼠标的消息时，在屏幕上显示相关的提示信息
	2. 对象销毁时在屏幕上显示相关的提示信息*/
public:
	MyWindow(const char* x) :Window(x) {};
	virtual void on_mouse_click(int, int) {
		cout << "这是来自鼠标的信息" << endl;
	};
	virtual void on_key(char) {
		cout << "这是来自键盘的信息" << endl;
	};
	~MyWindow() { cout << "对象正在销毁" << endl; }
};

class MyApp: public Application
{
	/*构造Application的派生类MyApp，使其：
	1. 初始化时创建MyWindow类型的窗口对象，而非Window类型的窗口对象
	2. 处理退出消息时，在屏幕上显示相关的提示信息*/
public:
	void initialize()
	{
		main_window = new MyWindow("Window of FOUNDSJJ");
		main_window->show_window();
	}
	void on_message_quit() {
		end_app = true;
		delete main_window;
		sleep();
	}
	void sleep() {
		cout << "正在退出" << endl;
	}
};

MyApp _my_app;


